Sasha Kharlamov
150707214
skharlamov@myseneca.ca
OOP345-NCC

Workshop 7 Reflection
---------------------

This was by far the hardest workshop I have done so far. The algorithms are very simple
in theory, but incredibly finicky when you try to use them. My largest struggle was
with using the transform() function. I must have struggled for at least three hours
wondering where it saw a void return type until I realized that my lambda function
was set up improperly and was returning a variable in the Covid struct, not the struct
itself.

The STL algorithms I used in this workshop are:
for_each: I used this as the easiest function to iterate through a list and display.
sort: I used this function as the obvious STL algorithm in my CovidCollection::sort
	because it's an explicit function made for sorting.
transform: Since for_each had already been used, I needed another function that 
	iterated through and made changes to the collection, so I used transform and I just
	had the result iterator be the collection itself.
any_of: Simple premise that it returns a bool if any items in the collection satisfy the given
	criteria.
copy_if: It copies into a new list if the criteria is met and that's exactly what
	I needed it to do.

Also, I know I repeated an algorithm in the two functions: getListForCountry and
getListForVariant. I did this because I could find no better function than copy_if
to fulfill that role without writing some mangled code. I also did this because only
getListForVariant is actually being used in main, so I didn't think it was necessary
to use a whole other algorithm for an unused function.

I believe that using algorithms is simpler than implementing manual loops in the same way
that using containers is simpler than implementing manual arrays: The hard work is done
for you as long as you learn how to use it. It is incredibly confusing if you don't learn
it, but once you do, it greatly lessens the complexity of arrays and loops since everything
is already encapsulated for you in an object.

I think I would redesign the sort function by creating a try-catch segment that would throw
and exception if there was an invalid field.